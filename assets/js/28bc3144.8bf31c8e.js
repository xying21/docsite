"use strict";(self.webpackChunkdev_doc=self.webpackChunkdev_doc||[]).push([[167],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return l},MDXProvider:function(){return p},mdx:function(){return b},useMDXComponents:function(){return u},withMDXComponents:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){return function(t){var n=u(t.components);return a.createElement(e,s({},t,{components:n}))}},u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,f=d["".concat(o,".").concat(p)]||d[p]||m[p]||s;return n?a.createElement(f,c(c({ref:t},l),{},{components:n})):a.createElement(f,c({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},22286:function(e,t,n){var a=n(20862).default;Object.defineProperty(t,"__esModule",{value:!0}),t.useLinksCollector=t.createStatefulLinksCollector=t.ProvideLinksCollector=void 0;var r=a(n(67294));t.createStatefulLinksCollector=function(){var e=new Set;return{collectLink:function(t){e.add(t)},getCollectedLinks:function(){return[].concat(e)}}};var s=(0,r.createContext)({collectLink:function(){}});t.useLinksCollector=function(){return(0,r.useContext)(s)};t.ProvideLinksCollector=function(e){var t=e.children,n=e.linksCollector;return r.default.createElement(s.Provider,{value:n},t)}},33692:function(e,t,n){var a=n(95318).default,r=n(20862).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=a(n(63366)),o=r(n(67294)),c=n(73727),i=a(n(52263)),l=a(n(13919)),d=a(n(10412)),u=n(22286),p=n(44996),m=n(18780),f=["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"];var b=function(e){var t,n,a=e.isNavLink,r=e.to,b=e.href,h=e.activeClassName,x=e.isActive,g=e["data-noBrokenLinkCheck"],v=e.autoAddBaseUrl,y=void 0===v||v,k=(0,s.default)(e,f),T=(0,i.default)().siteConfig,w=T.trailingSlash,N=T.baseUrl,S=(0,p.useBaseUrlUtils)().withBaseUrl,C=(0,u.useLinksCollector)(),O=r||b,_=(0,l.default)(O),j=null==O?void 0:O.replace("pathname://",""),q=void 0!==j?(n=j,y&&function(e){return e.startsWith("/")}(n)?S(n):n):void 0;q&&_&&(q=(0,m.applyTrailingSlash)(q,{trailingSlash:w,baseUrl:N}));var E=(0,o.useRef)(!1),L=a?c.NavLink:c.Link,B=d.default.canUseIntersectionObserver,P=(0,o.useRef)();(0,o.useEffect)((function(){return!B&&_&&null!=q&&window.docusaurus.prefetch(q),function(){B&&P.current&&P.current.disconnect()}}),[P,q,B,_]);var X=null!==(t=null==q?void 0:q.startsWith("#"))&&void 0!==t&&t,D=!q||!_||X;return q&&_&&!X&&!g&&C.collectLink(q),D?o.default.createElement("a",Object.assign({href:q},O&&!_&&{target:"_blank",rel:"noopener noreferrer"},k)):o.default.createElement(L,Object.assign({},k,{onMouseEnter:function(){E.current||null==q||(window.docusaurus.preload(q),E.current=!0)},innerRef:function(e){var t,n;B&&e&&_&&(t=e,n=function(){null!=q&&window.docusaurus.prefetch(q)},P.current=new window.IntersectionObserver((function(e){e.forEach((function(e){t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(P.current.unobserve(t),P.current.disconnect(),n())}))})),P.current.observe(t))},to:q||""},a&&{isActive:x,activeClassName:h}))};t.default=b},13919:function(e,t){function n(e){return!0===/^(\w*:|\/\/)/.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return void 0!==e&&!n(e)},t.hasProtocol=n},44996:function(e,t,n){var a=n(95318).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){void 0===t&&(t={});return(0,o().withBaseUrl)(e,t)},t.useBaseUrlUtils=o;var r=a(n(52263)),s=n(13919);function o(){var e=(0,r.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,a=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var r=void 0===a?{}:a,o=r.forcePrependBaseUrl,c=void 0!==o&&o,i=r.absolute,l=void 0!==i&&i;if(!n)return n;if(n.startsWith("#"))return n;if((0,s.hasProtocol)(n))return n;if(c)return t+n;var d=n.startsWith(t)?n:t+n.replace(/^\//,"");return l?e+d:d}(a,n,e,t)}}}},8802:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=t.trailingSlash,a=t.baseUrl;if(e.startsWith("#"))return e;if(void 0===n)return e;var r,s=e.split(/[#?]/)[0],o="/"===s||s===a?s:(r=s,n?function(e){return e.endsWith("/")?e:e+"/"}(r):function(e){return e.endsWith("/")?e.slice(0,-1):e}(r));return e.replace(s,o)}},18780:function(e,t,n){var a=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.uniq=t.applyTrailingSlash=void 0;var r=n(8802);Object.defineProperty(t,"applyTrailingSlash",{enumerable:!0,get:function(){return a(r).default}});var s=n(29964);Object.defineProperty(t,"uniq",{enumerable:!0,get:function(){return a(s).default}})},29964:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Array.from(new Set(e))}},68023:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return p},default:function(){return f}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),o=n(44996),c=n(33692),i=["components"],l={id:"querytransactions",title:"Query on Transactions"},d=void 0,u={unversionedId:"tools/lumos/guides/querytransactions",id:"tools/lumos/guides/querytransactions",isDocsHomePage:!1,title:"Query on Transactions",description:"Transactions are the most fundamental entities for a DApp to interact with Nervos CKB. For more information about CKB transactions, see Nervos Docs Data Structures.",source:"@site/docs/tools/lumos/guides/queryTransactions.md",sourceDirName:"tools/lumos/guides",slug:"/tools/lumos/guides/querytransactions",permalink:"/docsite/docs/tools/lumos/guides/querytransactions",editUrl:"https://github.com/xying21/docsite/docs/tools/lumos/guides/queryTransactions.md",tags:[],version:"current",lastUpdatedAt:1635849413,formattedLastUpdatedAt:"11/2/2021",frontMatter:{id:"querytransactions",title:"Query on Transactions"},sidebar:"sidebar2",previous:{title:"Query on CKB Capacity",permalink:"/docsite/docs/tools/lumos/guides/querycapacity"},next:{title:"Build Transactions",permalink:"/docsite/docs/tools/lumos/guides/buildtransactions"}},p=[{value:"Query Options",id:"query-options",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Environment",id:"environment",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Query Transactions by a Lock Script",id:"query-transactions-by-a-lock-script",children:[],level:3},{value:"Query Transactions between Given Block Numbers",id:"query-transactions-between-given-block-numbers",children:[],level:3},{value:"Skip Transactions",id:"skip-transactions",children:[],level:3},{value:"Order Transactions by Block Number",id:"order-transactions-by-block-number",children:[],level:3},{value:"Prefix Search on <var>args</var>",id:"prefix-search-on-args",children:[],level:3},{value:"Fine-grained Query for Transactions",id:"fine-grained-query-for-transactions",children:[],level:3},{value:"Get Transaction Status and Block Hash",id:"get-transaction-status-and-block-hash",children:[],level:3}],level:2}],m={toc:p};function f(e){var t=e.components,n=(0,r.default)(e,i);return(0,s.mdx)("wrapper",(0,a.default)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("blockquote",null,(0,s.mdx)("p",{parentName:"blockquote"},"Transactions are the most fundamental entities for a DApp to interact with Nervos CKB. For more information about CKB transactions, see ",(0,s.mdx)("a",{parentName:"p",href:"https://docs.nervos.org/docs/reference/transaction"},"Nervos Docs: Transaction")," and ",(0,s.mdx)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md#transaction"},"CKB RFC: Data Structures"),".")),(0,s.mdx)("p",null,"Lumos supports querying on transactions for specific query options."),(0,s.mdx)("h2",{id:"query-options"},"Query Options"),(0,s.mdx)("p",null,"Lumos supports to query on transactions for the options including ",(0,s.mdx)("var",null,"lock"),", ",(0,s.mdx)("var",null,"type"),", ",(0,s.mdx)("var",null,"argsLen"),", ",(0,s.mdx)("var",null,"fromBlock"),", ",(0,s.mdx)("var",null,"toBlock"),", ",(0,s.mdx)("var",null,"skip")," and ",(0,s.mdx)("var",null,"order"),"."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("var",null,"lock"),": A lock script or a ScriptWrapper of a lock script."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("var",null,"type"),": A type script or a ScriptWrapper of a type script.",(0,s.mdx)("p",{parentName:"li"},"For more information about ",(0,s.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/interfaces/base.scriptwrapper.html"},"ScriptWrapper"),", see ",(0,s.mdx)(c.default,{to:(0,o.default)("/docs/tools/lumos/guides/querycells#fine-grained-query-for-cells"),mdxType:"Link"},"Fine-grained Query for Cells"),".")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("var",null,"argsLen"),": The lock or type args length. The default value of ",(0,s.mdx)("var",null,"argsLen")," is -1 for the query on a full slice of the args."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("var",null,"fromBlock"),": The starting block number that the query returns."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("var",null,"toBlock"),": The ending block number that the query returns."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("var",null,"skip"),": The number of transactions being skipped for the Lumos indexer."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("var",null,"order"),": The query result can be returned in order of block numbers. The default value is ",(0,s.mdx)("var",null,"asc")," (ascending) for the returned result.")),(0,s.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.mdx)("p",null,"The following prerequisites apply for the examples in this guide:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"The development environment is set up. For more information, see ",(0,s.mdx)(c.default,{to:(0,o.default)("/docs/tools/lumos/preparation/setupsystem"),mdxType:"Link"},"Set Up the Development Environment"),"."),(0,s.mdx)("li",{parentName:"ul"},"The Lumos packages are installed. For more information, see ",(0,s.mdx)(c.default,{to:(0,o.default)("/docs/tools/lumos/guides/installlumos"),mdxType:"Link"},"Install Lumos Packages"),".")),(0,s.mdx)("h2",{id:"environment"},"Environment"),(0,s.mdx)("p",null,"The following examples are verified on Ubuntu 20.04.2. Steps on the other platforms can be adjusted accordingly."),(0,s.mdx)("h2",{id:"examples"},"Examples"),(0,s.mdx)("h3",{id:"query-transactions-by-a-lock-script"},"Query Transactions by a Lock Script"),(0,s.mdx)("p",null,"The following example creates a new ",(0,s.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/indexer.transactioncollector.html"},"TransactionCollector")," to collect transactions for a specific lock script and returns the transactions with status."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTXsbyLock" {7}',title:'"hellolumos/src/querytransactions.ts/getTXsbyLock"',"{7}":!0},'import { INDEXER } from "./index";\nimport { Script, Transaction } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTXsbyLock(lockScript: Script) {\n  console.log("Get transactions by lock script:");\n  const txCollector = new TransactionCollector(INDEXER, { lock: lockScript });\n  const txs: Transaction[] = [];\n  for await (const txWithStatus of txCollector.collect()) {\n    //@ts-ignore\n    const tx = txWithStatus.transaction;\n    //@ts-ignore\n    const txStatus = txWithStatus.tx_status.status;\n    txs.push(tx);\n    //console.log(txStatus);\n  }\n  return txs;\n}\n')),(0,s.mdx)("p",null,"Try the ",(0,s.mdx)("inlineCode",{parentName:"p"},"getTXsbyLock")," function in the Node.js REPL mode:"),(0,s.mdx)("details",null,(0,s.mdx)("summary",null,"CLICK ME"),(0,s.mdx)("p",null,(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querytransactions } = require(\".\");\nThe server is started.\n> const bob = accounts.BOB;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(bob.ADDRESS);\n> await querytransactions.getTXsbyLock(script);\nGet transactions by lock script:\n[\n  {\n    cell_deps: [ [Object] ],\n    hash: '0x22cc789bdaa8e021caa303cf20cfa4063b46a17abd62b31aa2cf712844f984cb',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000ac5500c3bb4487dbb7b034cd0fb4faec9a29645076d00c041e2a16bfb45c4e0c68d6470c1bd0afb9d0a1d973210896a27bbaef3f23864ac6a716b6291fb226be00'                                                                                    \n    ]\n  },\n  {\n    cell_deps: [ [Object] ],\n    hash: '0x46e6e4fd23263aa8983f73962faca0bd9d40463c2e42bbcd190249e3ec6bd5f8',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x550000001000000055000000550000004100000071222e2b88f03b643fce53e81ff281b31a0a4a11f3eb31793064586d94ad66b578e148340c980460a63fb2d31fe7e320e59c20e921fc2aa40b8b01840763b05601'\n    ]\n  },\n  {\n    cell_deps: [ [Object] ],\n    hash: '0x1f279591dca01710f1e5f71480ffe9039887212ade07b025b84a3d0b19f9a2bb',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000189e5d1d8df5b92dea79828ec074de83c03635d5a3f9e800736d576b074b03ca7c2553bff3b4f5fa38c8663dc6b976b0cd96127364bcdd2a49d454ce657b3ea801'\n    ]\n  }\n]\n")))),(0,s.mdx)("h3",{id:"query-transactions-between-given-block-numbers"},"Query Transactions between Given Block Numbers"),(0,s.mdx)("p",null,"The following example fetches the transactions between ","[",(0,s.mdx)("var",null,"fromBlock"),", ",(0,s.mdx)("var",null,"toBlock"),"]","."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTXsbetweenBlocks" {10-14}',title:'"hellolumos/src/querytransactions.ts/getTXsbetweenBlocks"',"{10-14}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTXsbetweenBlocks(\n  lockScript: Script,\n  fromBlock: string,\n  toBlock: string\n) {\n  const txCollector = new TransactionCollector(INDEXER, {\n    lock: lockScript,\n    fromBlock,\n    toBlock,\n  });\n  console.log("Get transactions between given blocks:");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),(0,s.mdx)("p",null,"Try the ",(0,s.mdx)("inlineCode",{parentName:"p"},"getTXsbetweenBlocks")," function in the Node.js REPL mode:"),(0,s.mdx)("details",null,(0,s.mdx)("summary",null,"CLICK ME"),(0,s.mdx)("p",null,(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-12}","{1,2,5,7-12}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querytransactions } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(alice.ADDRESS);\n> const from = \"0x11\";\n> const to = \"0x15\";\n> await querytransactions.getTXsbetweenBlocks(script, from, to);\nGet transactions between given blocks:\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0xa4e46a4d656c849ecee9b80fb2490967b0a89a6fd767acddc59ddd7d1013d1a9',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'                                                                            \n    ]\n  },\n  tx_status: {\n    block_hash: '0xe87b33e3b499ede1390cf12ec1f2df772762fa7cc981c55fe3753a01fcc52d14',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0x8e4eded5087d8341e739885d4dd39b78661fde80c711a42b4aeee856de4d5d1c',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'                                                                            \n    ]\n  },\n  tx_status: {\n    block_hash: '0xf410bc8b58e5edcc0f6f9277a3d4c1ada599884b7395ad2a57f65643051c5752',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0x4b4e37eda430c4c288398b518e00a93eae0fa979f65dc4f874feb2f4c8b5ae0b',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'                                                                            \n    ]\n  },\n  tx_status: {\n    block_hash: '0xb8166998d66f21d8b2b46c30a935a66c9f13ed6fb0dafa43679d6b781046f1eb',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0xc5e1990313383e57bbd7954808731c35666fe73b58a8c2c6bd5531a59af95e22',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'                                                                            \n    ]\n  },\n  tx_status: {\n    block_hash: '0xb0b006d8b1df2bbd67a0effabc9a018874f45eed06f9e299b169e2f17ef62b20',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0xeb37d08d17356435bc52dedcea5780b282ab40979ed0321cde12c91b9325ac86',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'\n    ]\n  },\n  tx_status: {\n    block_hash: '0x6a6c07981e60d3a0e021c14c61d0962947724a616c64ff64a6e583f4e3409c5d',\n    status: 'committed'\n  }\n}\n")))),(0,s.mdx)("h3",{id:"skip-transactions"},"Skip Transactions"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("var",null,"skip")," query option represents the number of transactions being skipped."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTXsandSkip" {6}',title:'"hellolumos/src/querytransactions.ts/getTXsandSkip"',"{6}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTXsandSkip(lock: Script, skip: number) {\n  const txCollector = new TransactionCollector(INDEXER, { lock, skip });\n  console.log("Get transactions and skip the first", skip, "trasactions");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),(0,s.mdx)("p",null,"Try the ",(0,s.mdx)("inlineCode",{parentName:"p"},"getTXsandSkip")," function in the Node.js REPL mode:"),(0,s.mdx)("details",null,(0,s.mdx)("summary",null,"CLICK ME"),(0,s.mdx)("p",null,(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querytransactions } = require(\".\");\nThe server is started.\n> const bob = accounts.BOB;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(bob.ADDRESS);\n> await querytransactions.getTXsandSkip(script, 2);\nGet transactions and skip the first 2 trasactions\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0x1f279591dca01710f1e5f71480ffe9039887212ade07b025b84a3d0b19f9a2bb',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000189e5d1d8df5b92dea79828ec074de83c03635d5a3f9e800736d576b074b03ca7c2553bff3b4f5fa38c8663dc6b976b0cd96127364bcdd2a49d454ce657b3ea801'\n    ]\n  },\n  tx_status: {\n    block_hash: '0x29acfca00bb07d94791c0f14685d40820ac198b771c894e45755bb55018fa6ea',\n    status: 'committed'\n  }\n}\n")))),(0,s.mdx)("h3",{id:"order-transactions-by-block-number"},"Order Transactions by Block Number"),(0,s.mdx)("p",null,"The following example creates a new ",(0,s.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/indexer.transactioncollector.html"},"TransactionCollector"),' and uses the TransactionCollector to collect transactions in the order of the block numbers. If the order is not specified, the default order is "asc" (ascending) for the returned result.'),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTXsandOrder" {6}',title:'"hellolumos/src/querytransactions.ts/getTXsandOrder"',"{6}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTXsandOrder(lock: Script, order: "asc" | "desc") {\n  const txCollector = new TransactionCollector(INDEXER, { lock, order });\n  console.log("Get transactions in order of", order);\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),(0,s.mdx)("h3",{id:"prefix-search-on-args"},"Prefix Search on ",(0,s.mdx)("var",null,"args")),(0,s.mdx)("p",null,"To enable prefix search on args of lock scripts or type scripts, a value can be specified for ",(0,s.mdx)("var",null,"argsLen")," instead of the default value of ",(0,s.mdx)("strong",{parentName:"p"},"-1"),". The default value is used for a query on the full slice of args of a lock script or a type script."),(0,s.mdx)("p",null,"The lock script args length is ",(0,s.mdx)("strong",{parentName:"p"},"20")," in normal scenarios and ",(0,s.mdx)("strong",{parentName:"p"},"28")," in the multisig scenario. When the length is not certain, the ",(0,s.mdx)("var",null,"argsLen")," parameter can be set as ",(0,s.mdx)("inlineCode",{parentName:"p"},"any"),". "),(0,s.mdx)("div",{className:"admonition admonition-info alert alert--info"},(0,s.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,s.mdx)("h5",{parentName:"div"},(0,s.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,s.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.mdx)("div",{parentName:"div",className:"admonition-content"},(0,s.mdx)("p",{parentName:"div"},"It is recommended to specify an explicit length for the ",(0,s.mdx)("var",null,"argsLen")," parameter in a prefix search, that has better performance than using ",(0,s.mdx)("inlineCode",{parentName:"p"},"any")," for ",(0,s.mdx)("var",null,"argsLen"),"."))),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/findTXsbyPrefix" {6}',title:'"hellolumos/src/querytransactions.ts/findTXsbyPrefix"',"{6}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function findTXsbyPrefix(lock: Script, argsLen: number) {\n  const txCollector = new TransactionCollector(INDEXER, { lock, argsLen });\n  console.log("Prefix Search");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),(0,s.mdx)("h3",{id:"fine-grained-query-for-transactions"},"Fine-grained Query for Transactions"),(0,s.mdx)("p",null,"Fine-grained query can query on transactions at the granularity of a cell type, a lock or type script, and the args length of the lock or type script by using ",(0,s.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/interfaces/base.scriptwrapper.html"},"ScriptWrapper"),"."),(0,s.mdx)("p",null,"The query acquires the transactions containing the cells in ",(0,s.mdx)("var",null,"ioType")," ( ",(0,s.mdx)("inlineCode",{parentName:"p"},"input")," or ",(0,s.mdx)("inlineCode",{parentName:"p"},"output")," or ",(0,s.mdx)("inlineCode",{parentName:"p"},"both"),") and with a specific lock or type script, and the args length of the script is ",(0,s.mdx)("var",null,"argsLen"),". The ",(0,s.mdx)("var",null,"argsLen")," config in the ScriptWrapper takes priority over the ",(0,s.mdx)("var",null,"argsLen")," config outside of the ScriptWrapper. If ",(0,s.mdx)("var",null,"argsLen")," is not specified in the ScriptWrapper, the ",(0,s.mdx)("var",null,"argsLen")," config outside of the ScriptWrapper or the default value -1 will be used."),(0,s.mdx)("p",null,"The following example is the fine-grained query for transactions on a ScriptWrapper that wraps a lock script, a lock args length and a cell type."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/finegrainedSearch" {10-14}',title:'"hellolumos/src/querytransactions.ts/finegrainedSearch"',"{10-14}":!0},'import { INDEXER } from "./index";\nimport { Script, ScriptWrapper } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function finegrainedSearch(\n  lockScript: Script,\n  argslen: number,\n  iotype: "output" | "input" | "both"\n) {\n  const lock: ScriptWrapper = {\n    script: lockScript,\n    ioType: iotype,\n    argsLen: argslen,\n  };\n  const txCollector = new TransactionCollector(INDEXER, {\n    lock,\n  });\n  console.log("Fine Grained Query");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),(0,s.mdx)("p",null,"Try the ",(0,s.mdx)("inlineCode",{parentName:"p"},"finegrainedSearch")," function in the Node.js REPL mode:"),(0,s.mdx)("details",null,(0,s.mdx)("summary",null,"CLICK ME"),(0,s.mdx)("p",null,(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10,68}","{1,2,5,7-10,68}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querytransactions } = require(\".\");\nThe server is started.\n> const bob = accounts.BOB;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(bob.ADDRESS);\n> await querytransactions.finegrainedSearch(script, 20, \"output\");\n# The result shows the transactions that produced output cells with Bob's lock script.\n# Bob received CKB capacity in these transactions.\nFine Grained Query\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0x22cc789bdaa8e021caa303cf20cfa4063b46a17abd62b31aa2cf712844f984cb',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000ac5500c3bb4487dbb7b034cd0fb4faec9a29645076d00c041e2a16bfb45c4e0c68d6470c1bd0afb9d0a1d973210896a27bbaef3f23864ac6a716b6291fb226be00'                                                                                    \n    ]\n  },\n  tx_status: {\n    block_hash: '0x6d60ae47167a78fbcf254c81b1d6356aceef2feeb4e039fed693c274a83faac1',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0x46e6e4fd23263aa8983f73962faca0bd9d40463c2e42bbcd190249e3ec6bd5f8',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x550000001000000055000000550000004100000071222e2b88f03b643fce53e81ff281b31a0a4a11f3eb31793064586d94ad66b578e148340c980460a63fb2d31fe7e320e59c20e921fc2aa40b8b01840763b05601'                                                                                    \n    ]\n  },\n  tx_status: {\n    block_hash: '0x63539ac9bc533bfb16e00cfaf736ebc041442fd3c3c6e8796b53cbdec0fb7af4',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0x1f279591dca01710f1e5f71480ffe9039887212ade07b025b84a3d0b19f9a2bb',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000189e5d1d8df5b92dea79828ec074de83c03635d5a3f9e800736d576b074b03ca7c2553bff3b4f5fa38c8663dc6b976b0cd96127364bcdd2a49d454ce657b3ea801'\n    ]\n  },\n  tx_status: {\n    block_hash: '0x29acfca00bb07d94791c0f14685d40820ac198b771c894e45755bb55018fa6ea',\n    status: 'committed'\n  }\n}\n> await querytransactions.finegrainedSearch(script, 20, \"input\");\n")))),(0,s.mdx)("h3",{id:"get-transaction-status-and-block-hash"},"Get Transaction Status and Block Hash"),(0,s.mdx)("p",null,"A transaction can be in one of the following status:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"A ",(0,s.mdx)("strong",{parentName:"li"},"pending")," result means the transaction is in the pool, and not proposed yet."),(0,s.mdx)("li",{parentName:"ul"},"A ",(0,s.mdx)("strong",{parentName:"li"},"proposed")," result means the transaction is in the pool, and can be committed in the next block."),(0,s.mdx)("li",{parentName:"ul"},"A ",(0,s.mdx)("strong",{parentName:"li"},"committed")," result means that the block involving the transaction has been mined and is officially on chain.")),(0,s.mdx)("p",null,"The following example uses the ",(0,s.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/rpc.rpc-2.html#get_transaction"},"get_transaction")," function of the ",(0,s.mdx)("inlineCode",{parentName:"p"},"@ckb-lumos/rpc")," package to get the transaction information for a specific transaction hash."),(0,s.mdx)("p",null,"Example: "),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTXbyHash" {5}',title:'"hellolumos/src/querytransactions.ts/getTXbyHash"',"{5}":!0},'import { RPC } from "@ckb-lumos/RPC";\nconst rpc = new RPC("http://127.0.0.1:8114");\n\nexport async function getTXbyHash(txHash: string) {\n  const txWithStatus = await rpc.get_transaction(txHash);\n\n  const status = txWithStatus?.tx_status.status;\n  const blockHash = txWithStatus?.tx_status.block_hash;\n  console.log("The transaction status is", status);\n  console.log("The block hash for the transaction is", blockHash);\n}\n')),(0,s.mdx)("p",null,"Try the ",(0,s.mdx)("inlineCode",{parentName:"p"},"getTXbyHash")," function in the Node.js REPL mode:"),(0,s.mdx)("details",null,(0,s.mdx)("summary",null,"CLICK ME"),(0,s.mdx)("p",null,(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7}","{1,2,5,7}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { querytransactions } = require(".");\nThe server is started.\n> await querytransactions.getTXbyHash("0x46e6e4fd23263aa8983f73962faca0bd9d40463c2e42bbcd190249e3ec6bd5f8");\nThe transaction status is committed\nThe block hash for the transaction is 0x63539ac9bc533bfb16e00cfaf736ebc041442fd3c3c6e8796b53cbdec0fb7af4\n')))))}f.isMDXComponent=!0}}]);