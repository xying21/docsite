"use strict";(self.webpackChunkdev_doc=self.webpackChunkdev_doc||[]).push([[146],{3905:function(e,n,l){l.r(n),l.d(n,{MDXContext:function(){return i},MDXProvider:function(){return p},mdx:function(){return b},useMDXComponents:function(){return u},withMDXComponents:function(){return d}});var t=l(67294);function r(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function c(){return c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var l=arguments[n];for(var t in l)Object.prototype.hasOwnProperty.call(l,t)&&(e[t]=l[t])}return e},c.apply(this,arguments)}function o(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,t)}return l}function a(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?o(Object(l),!0).forEach((function(n){r(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function s(e,n){if(null==e)return{};var l,t,r=function(e,n){if(null==e)return{};var l,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)l=c[t],n.indexOf(l)>=0||(r[l]=e[l]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)l=c[t],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(r[l]=e[l])}return r}var i=t.createContext({}),d=function(e){return function(n){var l=u(n.components);return t.createElement(e,c({},n,{components:l}))}},u=function(e){var n=t.useContext(i),l=n;return e&&(l="function"==typeof e?e(n):a(a({},n),e)),l},p=function(e){var n=u(e.components);return t.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var l=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),d=u(l),p=r,f=d["".concat(o,".").concat(p)]||d[p]||m[p]||c;return l?t.createElement(f,a(a({ref:n},i),{},{components:l})):t.createElement(f,a({ref:n},i))}));function b(e,n){var l=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=l.length,o=new Array(c);o[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var i=2;i<c;i++)o[i]=l[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,l)}f.displayName="MDXCreateElement"},22286:function(e,n,l){var t=l(20862).default;Object.defineProperty(n,"__esModule",{value:!0}),n.useLinksCollector=n.createStatefulLinksCollector=n.ProvideLinksCollector=void 0;var r=t(l(67294));n.createStatefulLinksCollector=function(){var e=new Set;return{collectLink:function(n){e.add(n)},getCollectedLinks:function(){return[].concat(e)}}};var c=(0,r.createContext)({collectLink:function(){}});n.useLinksCollector=function(){return(0,r.useContext)(c)};n.ProvideLinksCollector=function(e){var n=e.children,l=e.linksCollector;return r.default.createElement(c.Provider,{value:l},n)}},33692:function(e,n,l){var t=l(95318).default,r=l(20862).default;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var c=t(l(63366)),o=r(l(67294)),a=l(73727),s=t(l(52263)),i=t(l(13919)),d=t(l(10412)),u=l(22286),p=l(44996),m=l(18780),f=["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"];var b=function(e){var n,l,t=e.isNavLink,r=e.to,b=e.href,x=e.activeClassName,h=e.isActive,y=e["data-noBrokenLinkCheck"],k=e.autoAddBaseUrl,g=void 0===k||k,v=(0,c.default)(e,f),C=(0,s.default)().siteConfig,N=C.trailingSlash,_=C.baseUrl,w=(0,p.useBaseUrlUtils)().withBaseUrl,S=(0,u.useLinksCollector)(),q=r||b,E=(0,i.default)(q),L=null==q?void 0:q.replace("pathname://",""),T=void 0!==L?(l=L,g&&function(e){return e.startsWith("/")}(l)?w(l):l):void 0;T&&E&&(T=(0,m.applyTrailingSlash)(T,{trailingSlash:N,baseUrl:_}));var O=(0,o.useRef)(!1),P=t?a.NavLink:a.Link,j=d.default.canUseIntersectionObserver,B=(0,o.useRef)();(0,o.useEffect)((function(){return!j&&E&&null!=T&&window.docusaurus.prefetch(T),function(){j&&B.current&&B.current.disconnect()}}),[B,T,j,E]);var D=null!==(n=null==T?void 0:T.startsWith("#"))&&void 0!==n&&n,A=!T||!E||D;return T&&E&&!D&&!y&&S.collectLink(T),A?o.default.createElement("a",Object.assign({href:T},q&&!E&&{target:"_blank",rel:"noopener noreferrer"},v)):o.default.createElement(P,Object.assign({},v,{onMouseEnter:function(){O.current||null==T||(window.docusaurus.preload(T),O.current=!0)},innerRef:function(e){var n,l;j&&e&&E&&(n=e,l=function(){null!=T&&window.docusaurus.prefetch(T)},B.current=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(B.current.unobserve(n),B.current.disconnect(),l())}))})),B.current.observe(n))},to:T||""},t&&{isActive:h,activeClassName:x}))};n.default=b},13919:function(e,n){function l(e){return!0===/^(\w*:|\/\/)/.test(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return void 0!==e&&!l(e)},n.hasProtocol=l},44996:function(e,n,l){var t=l(95318).default;Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){void 0===n&&(n={});return(0,o().withBaseUrl)(e,n)},n.useBaseUrlUtils=o;var r=t(l(52263)),c=l(13919);function o(){var e=(0,r.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,l=void 0===n?"/":n,t=e.url;return{withBaseUrl:function(e,n){return function(e,n,l,t){var r=void 0===t?{}:t,o=r.forcePrependBaseUrl,a=void 0!==o&&o,s=r.absolute,i=void 0!==s&&s;if(!l)return l;if(l.startsWith("#"))return l;if((0,c.hasProtocol)(l))return l;if(a)return n+l;var d=l.startsWith(n)?l:n+l.replace(/^\//,"");return i?e+d:d}(t,l,e,n)}}}},8802:function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var l=n.trailingSlash,t=n.baseUrl;if(e.startsWith("#"))return e;if(void 0===l)return e;var r,c=e.split(/[#?]/)[0],o="/"===c||c===t?c:(r=c,l?function(e){return e.endsWith("/")?e:e+"/"}(r):function(e){return e.endsWith("/")?e.slice(0,-1):e}(r));return e.replace(c,o)}},18780:function(e,n,l){var t=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.uniq=n.applyTrailingSlash=void 0;var r=l(8802);Object.defineProperty(n,"applyTrailingSlash",{enumerable:!0,get:function(){return t(r).default}});var c=l(29964);Object.defineProperty(n,"uniq",{enumerable:!0,get:function(){return t(c).default}})},29964:function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return Array.from(new Set(e))}},48038:function(e,n,l){l.r(n),l.d(n,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return p},default:function(){return f}});var t=l(87462),r=l(63366),c=(l(67294),l(3905)),o=l(44996),a=l(33692),s=["components"],i={id:"querycells",title:"Query on Cells"},d=void 0,u={unversionedId:"tools/lumos/guides/querycells",id:"tools/lumos/guides/querycells",isDocsHomePage:!1,title:"Query on Cells",description:"Cells are the primary state units in CKB and are assets owned by users. A cell is the most basic structure that represents a single piece of data in Nervos. The data contained in a cell can take many forms, including CKBytes, tokens, code like JavaScript code, or even serialized data like JSON strings. For more information about the cell model, see Nervos Docs CKB Cell.",source:"@site/docs/tools/lumos/guides/queryCells.md",sourceDirName:"tools/lumos/guides",slug:"/tools/lumos/guides/querycells",permalink:"/docsite/docs/tools/lumos/guides/querycells",editUrl:"https://github.com/xying21/docsite/docs/tools/lumos/guides/queryCells.md",tags:[],version:"current",lastUpdatedAt:1635849413,formattedLastUpdatedAt:"11/2/2021",frontMatter:{id:"querycells",title:"Query on Cells"},sidebar:"sidebar2",previous:{title:"Set Up the Lumos Indexer",permalink:"/docsite/docs/tools/lumos/guides/indexer"},next:{title:"Query on CKB Capacity",permalink:"/docsite/docs/tools/lumos/guides/querycapacity"}},p=[{value:"Query Options",id:"query-options",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Environment",id:"environment",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Query Cells by a Lock Script",id:"query-cells-by-a-lock-script",children:[],level:3},{value:"Query Cells by Specific Lock and Type Script",id:"query-cells-by-specific-lock-and-type-script",children:[],level:3},{value:"Query Cells between Given Block Numbers",id:"query-cells-between-given-block-numbers",children:[],level:3},{value:"Skip Cells",id:"skip-cells",children:[],level:3},{value:"Prefix Search on <var>args</var>",id:"prefix-search-on-args",children:[],level:3},{value:"Fine-grained Query for Cells",id:"fine-grained-query-for-cells",children:[],level:3},{value:"Order Cells by Block Number",id:"order-cells-by-block-number",children:[],level:3},{value:"Fetch Cells in Locktime Pool",id:"fetch-cells-in-locktime-pool",children:[],level:3}],level:2}],m={toc:p};function f(e){var n=e.components,l=(0,r.default)(e,s);return(0,c.mdx)("wrapper",(0,t.default)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,c.mdx)("blockquote",null,(0,c.mdx)("p",{parentName:"blockquote"},"Cells are the primary state units in CKB and are assets owned by users. A cell is the most basic structure that represents a single piece of data in Nervos. The data contained in a cell can take many forms, including CKBytes, tokens, code like JavaScript code, or even serialized data like JSON strings. For more information about the cell model, see ",(0,c.mdx)("a",{parentName:"p",href:"https://docs.nervos.org/docs/reference/cell"},"Nervos Docs: Cell")," and ",(0,c.mdx)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0002-ckb/0002-ckb.md#42-cell"},"CKB RFC: CKB Cell"),".")),(0,c.mdx)("p",null,"Querying on cells are the fundamental functions for a DApp to respond to user queries and transaction requests. Lumos provides functions for the queries on cells with specific query options."),(0,c.mdx)("p",null,"The following example is a cell retrieved by Lumos query functions:"),(0,c.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,c.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,c.mdx)("h5",{parentName:"div"},(0,c.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,c.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,c.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,c.mdx)("div",{parentName:"div",className:"admonition-content"},(0,c.mdx)("p",{parentName:"div"},"Lumos enriches the cell structure defined in ",(0,c.mdx)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0002-ckb/0002-ckb.md#42-cell"},"CKB RFC: Cell")," with some customized fields (",(0,c.mdx)("inlineCode",{parentName:"p"},"out_point"),", ",(0,c.mdx)("inlineCode",{parentName:"p"},"block_hash")," and ",(0,c.mdx)("inlineCode",{parentName:"p"},"block_number"),"). "))),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript"},"{\n  cell_output: {\n    capacity: '0x2ecbd7d7dc',\n    lock: {\n      code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hash_type: 'type',\n      args: '0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e'\n    },\n    type: undefined\n  },\n  out_point: {\n    tx_hash: '0x0db73acbbbb04bb1b52153d30ef7486b191b5e376dcc6bc1439b3a6ed2a451d8',\n    index: '0x0'\n  },\n  block_hash: '0x353b8153561400ed623ef295edb7488025ff517a119770cf0c9dca886f193c5a',\n  block_number: '0x16',\n  data: '0x'\n}\n")),(0,c.mdx)("h2",{id:"query-options"},"Query Options"),(0,c.mdx)("p",null,"Lumos supports query options on cells, including ",(0,c.mdx)("var",null,"lock"),", ",(0,c.mdx)("var",null,"type"),", ",(0,c.mdx)("var",null,"argsLen"),", ",(0,c.mdx)("var",null,"data"),", ",(0,c.mdx)("var",null,"fromBlock"),", ",(0,c.mdx)("var",null,"toBlock"),", ",(0,c.mdx)("var",null,"skip")," and ",(0,c.mdx)("var",null,"order"),"."),(0,c.mdx)("ul",null,(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"lock"),": A lock script or a ScriptWrapper of a lock script."),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"type"),": A type script or a ScriptWrapper of a type script.",(0,c.mdx)("p",{parentName:"li"},"For more information about ",(0,c.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/interfaces/base.scriptwrapper.html"},"ScriptWrapper"),", see ",(0,c.mdx)(a.default,{to:(0,o.default)("/docs/tools/lumos/guides/querycells#fine-grained-query-for-cells"),mdxType:"Link"},"Fine-grained Query for Cells"),".")),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"argsLen"),": The lock or type args length. The default value of ",(0,c.mdx)("var",null,"argsLen")," is -1 for the query on a full slice of the args."),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"data"),": The cell data field."),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"fromBlock"),": The starting block number that the query returns."),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"toBlock"),": The ending block number that the query returns."),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"skip"),": The number of cells being skipped for the Lumos indexer."),(0,c.mdx)("li",{parentName:"ul"},(0,c.mdx)("var",null,"order"),": The query result can be returned in order of block numbers. The default value is ",(0,c.mdx)("var",null,"asc")," (ascending) for the returned result.")),(0,c.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,c.mdx)("p",null,"The following prerequisites apply for the examples of this guide:"),(0,c.mdx)("ul",null,(0,c.mdx)("li",{parentName:"ul"},"The development environment is set up. For more information, see ",(0,c.mdx)(a.default,{to:(0,o.default)("/docs/tools/lumos/preparation/setupsystem"),mdxType:"Link"},"Set Up the Development Environment"),"."),(0,c.mdx)("li",{parentName:"ul"},"The Lumos packages are installed. For more information, see ",(0,c.mdx)(a.default,{to:(0,o.default)("/docs/tools/lumos/guides/installlumos"),mdxType:"Link"},"Install Lumos Packages"),".")),(0,c.mdx)("h2",{id:"environment"},"Environment"),(0,c.mdx)("p",null,"The following examples are verified on Ubuntu 20.04.2. Steps on the other platforms can be adjusted accordingly."),(0,c.mdx)("h2",{id:"examples"},"Examples"),(0,c.mdx)("h3",{id:"query-cells-by-a-lock-script"},"Query Cells by a Lock Script"),(0,c.mdx)("p",null,"The following example collects the cells for a specific lock script."),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/findCellsbyLock" {5}',title:'"hellolumos/src/querycells.ts/findCellsbyLock"',"{5}":!0},'import { INDEXER } from "./index";\nimport { Cell, Script } from "@ckb-lumos/base";\n\nexport const findCellsbyLock = async (lockScript: Script): Promise<Cell[]> => {\n  const collector = INDEXER.collector({ lock: lockScript });\n  const cells: Cell[] = [];\n  console.log("Find the cells by lock script:");\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n};\n')),(0,c.mdx)("p",null,"The ",(0,c.mdx)("inlineCode",{parentName:"p"},"INDEXER")," of the example is a RockDB backed indexer that is initialized and started in the ",(0,c.mdx)("var",null,"hellolumos/src/index.ts")," file. For more information about setting up the Lumos indexer, see ",(0,c.mdx)(a.default,{to:(0,o.default)("/docs/tools/lumos/guides/indexer#set-up-the-rocksdb-backed-indexer"),mdxType:"Link"},"Set Up the RocksDB Backed Indexer"),"."),(0,c.mdx)("p",null,"Try the ",(0,c.mdx)("inlineCode",{parentName:"p"},"findCellsbyLock")," function in the Node.js REPL mode:"),(0,c.mdx)("details",null,(0,c.mdx)("summary",null,"CLICK ME"),(0,c.mdx)("p",null,(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-13}","{1,2,5,7-13}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querycells } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> const script = {\n code_hash: \"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8\",\n hash_type: \"type\",\n args: alice.ARGS,\n };\n> await querycells.findCellsbyLock(script);\nFind the cells by lock script:\n[\n  {\n    cell_output: { capacity: '0x12479ca35838', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0xf8c0964b90a4cb6e148e13d28ff945e83577ed1aa0bba3304068f418951d9ad9',\n      index: '0x0'\n    },\n    block_hash: '0x06cb6adb0737838fb3982ff98084efd643ee426e167ab5dd96688008a19371f3',\n    block_number: '0x14',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x12479c398188', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x65d86b9695fcbd376c245ad5566ea6c65c7fa8c61e485293e55c2dc236866c68',\n      index: '0x0'\n    },\n    block_hash: '0x72bf246cae9d776f8db37ba27c80b1c65e56063ddc9663ca690033bc6647edce',\n    block_number: '0x15',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x12479bcfab3f', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0xfea673fcbff06b7a85a6aea80f9ca7e5f6d8ff2750070b49c1afce3d518c7789',\n      index: '0x0'\n    },\n    block_hash: '0x42cb31ce51f37d85cc52b369135148f13fa22d1c89bc501c6acd536d3a7b676f',\n    block_number: '0x16',\n    data: '0x'\n  },\n  ...\n]\n")))),(0,c.mdx)("h3",{id:"query-cells-by-specific-lock-and-type-script"},"Query Cells by Specific Lock and Type Script"),(0,c.mdx)("p",null,"The following example collects the cells for a specific lock script and a type script, and returns the cells as the result."),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/findCellsbyLockandType" {8}',title:'"hellolumos/src/querycells.ts/findCellsbyLockandType"',"{8}":!0},'import { INDEXER } from "./index";\nimport { Cell, Script } from "@ckb-lumos/base";\n\nexport async function findCellsbyLockandType(\n  lockScript: Script,\n  typeScript: Script\n): Promise<Cell[]> {\n  const collector = INDEXER.collector({ lock: lockScript, type: typeScript });\n  const cells: Cell[] = [];\n  console.log("Find the cells by Lock and Type script");\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n}\n')),(0,c.mdx)("p",null,"Try the ",(0,c.mdx)("inlineCode",{parentName:"p"},"findCellsbyLockandType")," function in the Node.js REPL mode:"),(0,c.mdx)("details",null,(0,c.mdx)("summary",null,"CLICK ME"),(0,c.mdx)("p",null,(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1-2,5,7-15,18}","{1-2,5,7-15,18}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querycells, CONFIG } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(alice.ADDRESS);\n> const template = CONFIG.SCRIPTS[\"DAO\"];\n> const typescript = {\n code_hash: template.CODE_HASH,\n hash_type: template.HASH_TYPE,\n args: \"0x\",\n };\n# The example finds the DAO cells that Alice owns.\n# For more information about DAO operations, see Build Transactions.\n> await querycells.findCellsbyLockandType(script, typescript);\nFind the cells by Lock and Type script\n[\n  {\n    cell_output: { capacity: '0x4a817c800', lock: [Object], type: [Object] },\n    out_point: {\n      tx_hash: '0x6d9a12180755791eaf61d070d8d5112513cfd671d14434bec5b57c91fef17ee8',\n      index: '0x0'\n    },\n    block_hash: '0x23b5e3299f50305f76ad55789e1958a9e26b2145cc9eef464cd14006b8c01304',\n    block_number: '0x77b',\n    data: '0x2b07000000000000'\n  }\n]\n")))),(0,c.mdx)("h3",{id:"query-cells-between-given-block-numbers"},"Query Cells between Given Block Numbers"),(0,c.mdx)("p",null,"The following example fetches the cells between ","[",(0,c.mdx)("var",null,"fromblock"),", ",(0,c.mdx)("var",null,"toblock"),"]",". "),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/findCellsBetweenBlocks" {9}',title:'"hellolumos/src/querycells.ts/findCellsBetweenBlocks"',"{9}":!0},'import { INDEXER } from "./index";\nimport { Cell, Script } from "@ckb-lumos/base";\n\nexport async function findCellsBetweenBlocks(\n  lockScript: Script,\n  fromBlock: string,\n  toBlock: string\n): Promise<Cell[]> {\n  const collector = INDEXER.collector({ lock: lockScript, fromBlock, toBlock });\n  const cells: Cell[] = [];\n  console.log("Find cells from block", fromBlock, "to block", toBlock);\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n    // console.log(cell);\n  }\n  return cells;\n}\n')),(0,c.mdx)("p",null,"Try the ",(0,c.mdx)("inlineCode",{parentName:"p"},"findCellsBetweenBlocks")," function in the Node.js REPL mode:"),(0,c.mdx)("details",null,(0,c.mdx)("summary",null,"CLICK ME"),(0,c.mdx)("p",null,(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-12}","{1,2,5,7-12}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querycells } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(alice.ADDRESS);\n> const from = \"0x11\";\n> const to = \"0x15\";\n> await querycells.findCellsBetweenBlocks(script, from, to);\nFind cells from block 0x11 to block 0x15\n[\n  {\n    cell_output: { capacity: '0x2ecbd7e568', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0xa4e46a4d656c849ecee9b80fb2490967b0a89a6fd767acddc59ddd7d1013d1a9',\n      index: '0x0'\n    },\n    block_hash: '0xe87b33e3b499ede1390cf12ec1f2df772762fa7cc981c55fe3753a01fcc52d14',\n    block_number: '0x11',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7e2b3', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x8e4eded5087d8341e739885d4dd39b78661fde80c711a42b4aeee856de4d5d1c',\n      index: '0x0'\n    },\n    block_hash: '0xf410bc8b58e5edcc0f6f9277a3d4c1ada599884b7395ad2a57f65643051c5752',\n    block_number: '0x12',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7dffd', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x4b4e37eda430c4c288398b518e00a93eae0fa979f65dc4f874feb2f4c8b5ae0b',\n      index: '0x0'\n    },\n    block_hash: '0xb8166998d66f21d8b2b46c30a935a66c9f13ed6fb0dafa43679d6b781046f1eb',\n    block_number: '0x13',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7dd47', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0xc5e1990313383e57bbd7954808731c35666fe73b58a8c2c6bd5531a59af95e22',\n      index: '0x0'\n    },\n    block_hash: '0xb0b006d8b1df2bbd67a0effabc9a018874f45eed06f9e299b169e2f17ef62b20',\n    block_number: '0x14',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7da92', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0xeb37d08d17356435bc52dedcea5780b282ab40979ed0321cde12c91b9325ac86',\n      index: '0x0'\n    },\n    block_hash: '0x6a6c07981e60d3a0e021c14c61d0962947724a616c64ff64a6e583f4e3409c5d',\n    block_number: '0x15',\n    data: '0x'\n  }\n]\n")))),(0,c.mdx)("h3",{id:"skip-cells"},"Skip Cells"),(0,c.mdx)("p",null,"The ",(0,c.mdx)("inlineCode",{parentName:"p"},"skip")," parameter represents the number of cells being skipped for the Lumos indexer. "),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/findCellsandSkip" {8}',title:'"hellolumos/src/querycells.ts/findCellsandSkip"',"{8}":!0},'import { INDEXER } from "./index";\nimport { Cell, Script } from "@ckb-lumos/base";\n\nexport async function findCellsandSkip(\n  lockScript: Script,\n  skip: number\n): Promise<Cell[]> {\n  const collector = INDEXER.collector({ lock: lockScript, skip: skip });\n  const cells: Cell[] = [];\n  console.log("Find Cells and Skip the first", skip, "cells:");\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n    console.log(cell);\n  }\n  return cells;\n}\n')),(0,c.mdx)("p",null,"Try the ",(0,c.mdx)("inlineCode",{parentName:"p"},"findCellsandSkip")," function in the Node.js REPL mode: "),(0,c.mdx)("details",null,(0,c.mdx)("summary",null,"CLICK ME"),(0,c.mdx)("p",null,(0,c.mdx)("p",null,"The example skips the first 10 cells and get the result from the 11",(0,c.mdx)("sup",null,"th.")," cell."),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querycells } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(alice.ADDRESS);\n> await querycells.findCellsandSkip(script1, 10);\nFind Cells and Skip the first 10 cells:\n{\n  cell_output: {\n    capacity: '0x2ecbd7d7dc',\n    lock: {\n      code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hash_type: 'type',\n      args: '0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e'\n    },\n    type: undefined\n  },\n  out_point: {\n    tx_hash: '0x0db73acbbbb04bb1b52153d30ef7486b191b5e376dcc6bc1439b3a6ed2a451d8',\n    index: '0x0'\n  },\n  block_hash: '0x353b8153561400ed623ef295edb7488025ff517a119770cf0c9dca886f193c5a',\n  block_number: '0x16',\n  data: '0x'\n}\n{\n  cell_output: {\n    capacity: '0x2ecbd7d526',\n    lock: {\n      code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n      hash_type: 'type',\n      args: '0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e'\n    },\n    type: undefined\n  },\n  out_point: {\n    tx_hash: '0x90085bb7d249ef4794bcb2d4114b62e4b94e24b02282fd2985ab5ebe36ff8769',\n    index: '0x0'\n  },\n  block_hash: '0x406d16483b941b38bf95bd9e5188f719807007f16293b86c15ae5e6e5f63a717',\n  block_number: '0x17',\n  data: '0x'\n}\n...\n")))),(0,c.mdx)("h3",{id:"prefix-search-on-args"},"Prefix Search on ",(0,c.mdx)("var",null,"args")),(0,c.mdx)("p",null,"To enable prefix search on args of lock scripts or type scripts, a value can be specified for ",(0,c.mdx)("var",null,"argsLen")," instead of the default value of ",(0,c.mdx)("strong",{parentName:"p"},"-1"),". The default value is used for a query on the full slice of args of a lock script or a type script."),(0,c.mdx)("p",null,"The lock script args length is ",(0,c.mdx)("strong",{parentName:"p"},"20")," in normal scenarios and ",(0,c.mdx)("strong",{parentName:"p"},"28")," in the multisig scenario. When the length is uncertain, the ",(0,c.mdx)("var",null,"argsLen")," parameter can be set as ",(0,c.mdx)("inlineCode",{parentName:"p"},"any"),". "),(0,c.mdx)("div",{className:"admonition admonition-info alert alert--info"},(0,c.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,c.mdx)("h5",{parentName:"div"},(0,c.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,c.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,c.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,c.mdx)("div",{parentName:"div",className:"admonition-content"},(0,c.mdx)("p",{parentName:"div"},"It is recommended to specify an explicit length for the ",(0,c.mdx)("var",null,"argsLen")," parameter in a prefix search, that has better performance than using ",(0,c.mdx)("inlineCode",{parentName:"p"},"any"),"."))),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/findCellsbyPrefix" {8}',title:'"hellolumos/src/querycells.ts/findCellsbyPrefix"',"{8}":!0},'import { INDEXER } from "./index";\nimport { Cell, Script } from "@ckb-lumos/base";\n\nexport async function findCellsbyPrefix(\n  lockScript: Script,\n  argslen: number\n): Promise<Cell[]> {\n  const collector = INDEXER.collector({ lock: lockScript, argsLen: argslen });\n  const cells: Cell[] = [];\n  console.log("Find Cells by prefix of args");\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n}\n')),(0,c.mdx)("p",null,"Try the ",(0,c.mdx)("inlineCode",{parentName:"p"},"findCellsbyPrefix")," function in the Node.js REPL mode: "),(0,c.mdx)("details",null,(0,c.mdx)("summary",null,"CLICK ME"),(0,c.mdx)("p",null,(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,8-13}","{1,2,5,8-13}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { querycells } = require(\".\");\nThe server is started.\n# Truncate the lock args of Bob's account by removing the last 11 bytes and run prefix search on the truncated lock args.\n> const script = {\n code_hash: \"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8\",\n hash_type: \"type\",\n args: \"0xecbe30bcf5c6b2f2d8\",\n };\n> await querycells.findCellsbyPrefix(script, 20);\nFind Cells by prefix of args\n[\n  {\n    cell_output: { capacity: '0x4a817c800', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x22cc789bdaa8e021caa303cf20cfa4063b46a17abd62b31aa2cf712844f984cb',\n      index: '0x0'\n    },\n    block_hash: '0x6d60ae47167a78fbcf254c81b1d6356aceef2feeb4e039fed693c274a83faac1',\n    block_number: '0xf',\n    data: '0x'\n  }\n  ...\n]\n")))),(0,c.mdx)("h3",{id:"fine-grained-query-for-cells"},"Fine-grained Query for Cells"),(0,c.mdx)("p",null,"Fine-grained query can query on cells at the granularity of a lock or type script, and the args length of the lock or type script by using ",(0,c.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/interfaces/base.scriptwrapper.html"},"ScriptWrapper"),". "),(0,c.mdx)("p",null,"The query gets the cells with a specific lock or type script, and specific args length of the script. The  ",(0,c.mdx)("var",null,"argsLen")," config in the ScriptWrapper takes priority over the ",(0,c.mdx)("var",null,"argsLen")," config outside of the ScriptWrapper. If ",(0,c.mdx)("var",null,"argsLen")," is not specified in the ScriptWrapper, the ",(0,c.mdx)("var",null,"argsLen")," config outside of the ScriptWrapper or the default value -1 will be used."),(0,c.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,c.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,c.mdx)("h5",{parentName:"div"},(0,c.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,c.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,c.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,c.mdx)("div",{parentName:"div",className:"admonition-content"},(0,c.mdx)("var",null,"ioType")," is inapplicable in the fine-grained query for cells.")),(0,c.mdx)("p",null,"The following example is the fine-grained query for cells on a ScriptWrapper that wraps a lock script and a lock args length. "),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/finegrainedSearch()" {8-11}',title:'"hellolumos/src/querycells.ts/finegrainedSearch()"',"{8-11}":!0},'import { INDEXER } from "./index";\nimport { Cell, Script, ScriptWrapper } from "@ckb-lumos/base";\n\nexport async function finegrainedSearch(\n  lockScript: Script,\n  argslen: number,\n): Promise<Cell[]> {\n  const lock: ScriptWrapper = {\n    script: lockScript,\n    argsLen: argslen,\n  };\n  const collector = INDEXER.collector({ lock: lock });\n  const cells: Cell[] = [];\n  console.log("Fine-Grained Query:");\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n}\n')),(0,c.mdx)("p",null,"Try the ",(0,c.mdx)("inlineCode",{parentName:"p"},"finegrainedSearch")," function in Node.js REPL mode:"),(0,c.mdx)("details",null,(0,c.mdx)("summary",null,"CLICK ME"),(0,c.mdx)("p",null,(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-14}","{1,2,5,7-14}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querycells } = require(\".\");\nThe server is started.\n> const bob = accounts.BOB;\n> const script = {\n code_hash: \"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8\",\n hash_type: \"type\",\n args: bob.ARGS,\n };\n> const argslen = 20;\n> await querycells.finegrainedSearch(script, argslen);\n# The result shows the cells with Bob's lock script and the lock args length is 20 bytes.\nFine-Grained Query:\n[\n  {\n    cell_output: { capacity: '0x4a817c800', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x22cc789bdaa8e021caa303cf20cfa4063b46a17abd62b31aa2cf712844f984cb',\n      index: '0x0'\n    },\n    block_hash: '0x6d60ae47167a78fbcf254c81b1d6356aceef2feeb4e039fed693c274a83faac1',\n    block_number: '0xf',\n    data: '0x'\n  }\n  ...\n]\n")))),(0,c.mdx)("h3",{id:"order-cells-by-block-number"},"Order Cells by Block Number"),(0,c.mdx)("p",null,"The following example creates a new ",(0,c.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/indexer.cellcollector.html"},"CellCollector")," and uses the CellCollector to collect cells in order of block numbers for a specific lock script."),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/findCellsandOrder" {11}',title:'"hellolumos/src/querycells.ts/findCellsandOrder"',"{11}":!0},'import { INDEXER } from "./index";\nimport { Cell, Script } from "@ckb-lumos/base";\nimport { CellCollector } from "@ckb-lumos/indexer";\n\nexport async function findCellsandOrder(\n  lockScript: Script,\n  order: "asc" | "desc"\n): Promise<Cell[]> {\n  const collector = new CellCollector(INDEXER, {\n    lock: lockScript,\n    order: order,\n  });\n  const cells: Cell[] = [];\n  console.log("Find Cells in", order, "order of block numbers:");\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n}\n')),(0,c.mdx)("p",null,"Try the ",(0,c.mdx)("inlineCode",{parentName:"p"},"findCellsandOrder")," function in Node.js REPL mode: "),(0,c.mdx)("details",null,(0,c.mdx)("summary",null,"CLICK ME"),(0,c.mdx)("p",null,"The following example gets the live cells for Alice and returns the result in descending order of block numbers.",(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querycells } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(alice.ADDRESS);\n> await querycells.findCellsandOrder(script, \"desc\");\nFind Cells in desc order of block numbers:\n[\n  ...\n  {\n    cell_output: { capacity: '0x2ecbd7d526', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x90085bb7d249ef4794bcb2d4114b62e4b94e24b02282fd2985ab5ebe36ff8769',\n      index: '0x0'\n    },\n    block_hash: '0x406d16483b941b38bf95bd9e5188f719807007f16293b86c15ae5e6e5f63a717',\n    block_number: '0x17',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7d7dc', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x0db73acbbbb04bb1b52153d30ef7486b191b5e376dcc6bc1439b3a6ed2a451d8',\n      index: '0x0'\n    },\n    block_hash: '0x353b8153561400ed623ef295edb7488025ff517a119770cf0c9dca886f193c5a',\n    block_number: '0x16',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7da92', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0xeb37d08d17356435bc52dedcea5780b282ab40979ed0321cde12c91b9325ac86',\n      index: '0x0'\n    },\n    block_hash: '0x6a6c07981e60d3a0e021c14c61d0962947724a616c64ff64a6e583f4e3409c5d',\n    block_number: '0x15',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7dd47', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0xc5e1990313383e57bbd7954808731c35666fe73b58a8c2c6bd5531a59af95e22',\n      index: '0x0'\n    },\n    block_hash: '0xb0b006d8b1df2bbd67a0effabc9a018874f45eed06f9e299b169e2f17ef62b20',\n    block_number: '0x14',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7dffd', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x4b4e37eda430c4c288398b518e00a93eae0fa979f65dc4f874feb2f4c8b5ae0b',\n      index: '0x0'\n    },\n    block_hash: '0xb8166998d66f21d8b2b46c30a935a66c9f13ed6fb0dafa43679d6b781046f1eb',\n    block_number: '0x13',\n    data: '0x'\n  },\n  {\n    cell_output: { capacity: '0x2ecbd7e2b3', lock: [Object], type: undefined },\n    out_point: {\n      tx_hash: '0x8e4eded5087d8341e739885d4dd39b78661fde80c711a42b4aeee856de4d5d1c',\n      index: '0x0'\n    },\n    block_hash: '0xf410bc8b58e5edcc0f6f9277a3d4c1ada599884b7395ad2a57f65643051c5752',\n    block_number: '0x12',\n    data: '0x'\n  },\n  ...\n]\n")))),(0,c.mdx)("h3",{id:"fetch-cells-in-locktime-pool"},"Fetch Cells in Locktime Pool"),(0,c.mdx)("p",null,"Lumos provides the ",(0,c.mdx)("inlineCode",{parentName:"p"},"locktimepool")," module for the cells with a lock period. Now the ",(0,c.mdx)("inlineCode",{parentName:"p"},"locktimepool")," module supports DAO withdrawn cells and Multisig cells. "),(0,c.mdx)("p",null,"The following example collects all the ",(0,c.mdx)("strong",{parentName:"p"},"withdrawn")," cells and ",(0,c.mdx)("strong",{parentName:"p"},"Multisig")," cells that with a lock period for an account and returns the collected cells as the result. "),(0,c.mdx)("p",null,"Example:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querycells.ts/locktimePoolCells" {4}',title:'"hellolumos/src/querycells.ts/locktimePoolCells"',"{4}":!0},'import { locktimePool } from "@ckb-lumos/common-scripts";\n\nexport async function locktimePoolCells(frominfo: string): Promise<Cell[]> {\n  const collector = new locktimePool.CellCollector(frominfo, INDEXER);\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n    console.log(cell);\n  }\n  return cells;\n}\n')),(0,c.mdx)("p",null,"For more information, see the ",(0,c.mdx)(a.default,{to:(0,o.default)("/docs/tools/lumos/guides/buildtransactions#transfer-ckb-with-locktime-pool"),mdxType:"Link"},"Transfer CKB with Locktime Pool")," example."))}f.isMDXComponent=!0}}]);