"use strict";(self.webpackChunkdev_doc=self.webpackChunkdev_doc||[]).push([[4836],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return d},MDXProvider:function(){return m},mdx:function(){return h},useMDXComponents:function(){return p},withMDXComponents:function(){return c}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),c=function(e){return function(n){var t=p(n.components);return a.createElement(e,r({},n,{components:t}))}},p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=o,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(f,i(i({ref:n},d),{},{components:t})):a.createElement(f,i({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},22286:function(e,n,t){var a=t(20862).default;Object.defineProperty(n,"__esModule",{value:!0}),n.useLinksCollector=n.createStatefulLinksCollector=n.ProvideLinksCollector=void 0;var o=a(t(67294));n.createStatefulLinksCollector=function(){var e=new Set;return{collectLink:function(n){e.add(n)},getCollectedLinks:function(){return[].concat(e)}}};var r=(0,o.createContext)({collectLink:function(){}});n.useLinksCollector=function(){return(0,o.useContext)(r)};n.ProvideLinksCollector=function(e){var n=e.children,t=e.linksCollector;return o.default.createElement(r.Provider,{value:t},n)}},33692:function(e,n,t){var a=t(95318).default,o=t(20862).default;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=a(t(63366)),l=o(t(67294)),i=t(73727),s=a(t(52263)),d=a(t(13919)),c=a(t(10412)),p=t(22286),m=t(44996),u=t(18780),f=["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"];var h=function(e){var n,t,a=e.isNavLink,o=e.to,h=e.href,x=e.activeClassName,g=e.isActive,v=e["data-noBrokenLinkCheck"],b=e.autoAddBaseUrl,N=void 0===b||b,k=(0,r.default)(e,f),y=(0,s.default)().siteConfig,w=y.trailingSlash,T=y.baseUrl,C=(0,m.useBaseUrlUtils)().withBaseUrl,_=(0,p.useLinksCollector)(),F=o||h,S=(0,d.default)(F),D=null==F?void 0:F.replace("pathname://",""),B=void 0!==D?(t=D,N&&function(e){return e.startsWith("/")}(t)?C(t):t):void 0;B&&S&&(B=(0,u.applyTrailingSlash)(B,{trailingSlash:w,baseUrl:T}));var A=(0,l.useRef)(!1),O=a?i.NavLink:i.Link,E=c.default.canUseIntersectionObserver,j=(0,l.useRef)();(0,l.useEffect)((function(){return!E&&S&&null!=B&&window.docusaurus.prefetch(B),function(){E&&j.current&&j.current.disconnect()}}),[j,B,E,S]);var P=null!==(n=null==B?void 0:B.startsWith("#"))&&void 0!==n&&n,z=!B||!S||P;return B&&S&&!P&&!v&&_.collectLink(B),z?l.default.createElement("a",Object.assign({href:B},F&&!S&&{target:"_blank",rel:"noopener noreferrer"},k)):l.default.createElement(O,Object.assign({},k,{onMouseEnter:function(){A.current||null==B||(window.docusaurus.preload(B),A.current=!0)},innerRef:function(e){var n,t;E&&e&&S&&(n=e,t=function(){null!=B&&window.docusaurus.prefetch(B)},j.current=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(j.current.unobserve(n),j.current.disconnect(),t())}))})),j.current.observe(n))},to:B||""},a&&{isActive:g,activeClassName:x}))};n.default=h},13919:function(e,n){function t(e){return!0===/^(\w*:|\/\/)/.test(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return void 0!==e&&!t(e)},n.hasProtocol=t},44996:function(e,n,t){var a=t(95318).default;Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){void 0===n&&(n={});return(0,l().withBaseUrl)(e,n)},n.useBaseUrlUtils=l;var o=a(t(52263)),r=t(13919);function l(){var e=(0,o.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,a=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,a){var o=void 0===a?{}:a,l=o.forcePrependBaseUrl,i=void 0!==l&&l,s=o.absolute,d=void 0!==s&&s;if(!t)return t;if(t.startsWith("#"))return t;if((0,r.hasProtocol)(t))return t;if(i)return n+t;var c=t.startsWith(n)?t:n+t.replace(/^\//,"");return d?e+c:c}(a,t,e,n)}}}},8802:function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var t=n.trailingSlash,a=n.baseUrl;if(e.startsWith("#"))return e;if(void 0===t)return e;var o,r=e.split(/[#?]/)[0],l="/"===r||r===a?r:(o=r,t?function(e){return e.endsWith("/")?e:e+"/"}(o):function(e){return e.endsWith("/")?e.slice(0,-1):e}(o));return e.replace(r,l)}},18780:function(e,n,t){var a=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.uniq=n.applyTrailingSlash=void 0;var o=t(8802);Object.defineProperty(n,"applyTrailingSlash",{enumerable:!0,get:function(){return a(o).default}});var r=t(29964);Object.defineProperty(n,"uniq",{enumerable:!0,get:function(){return a(r).default}})},29964:function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return Array.from(new Set(e))}},99720:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return m},default:function(){return f}});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),l=t(44996),i=t(33692),s=["components"],d={id:"integratenft",title:"DApps on CKB Workshop Code"},c=void 0,p={unversionedId:"tools/lumos/guides/integratenft",id:"tools/lumos/guides/integratenft",isDocsHomePage:!1,title:"DApps on CKB Workshop Code",description:"A code example, DApps on CKB Workshop Code, is provided for the demonstration of integrating the NFT script on CKB. For more information about CKB NFT, see CKB RFC: CKB-NFT Draft Spec.",source:"@site/docs/tools/lumos/guides/nftglue.md",sourceDirName:"tools/lumos/guides",slug:"/tools/lumos/guides/integratenft",permalink:"/docsite/docs/tools/lumos/guides/integratenft",editUrl:"https://github.com/xying21/docsite/docs/tools/lumos/guides/nftglue.md",tags:[],version:"current",lastUpdatedAt:1635849413,formattedLastUpdatedAt:"11/2/2021",frontMatter:{id:"integratenft",title:"DApps on CKB Workshop Code"},sidebar:"sidebar2",previous:{title:"Manage Accounts",permalink:"/docsite/docs/tools/lumos/guides/manageaccounts"},next:{title:"ckb-sdk-go",permalink:"/docsite/docs/tools/sdk/overview_go"}},m=[{value:"Environment",id:"environment",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Deploy the NFT Script on DEV Chain",id:"deploy-the-nft-script-on-dev-chain",children:[{value:"Step 1. Install Docker on Ubuntu and manage Docker as a non-root user.",id:"step-1-install-docker-on-ubuntu-and-manage-docker-as-a-non-root-user",children:[],level:3},{value:"Step 2. Install Capsule.",id:"step-2-install-capsule",children:[],level:3},{value:"Step 3. Download the example code.",id:"step-3-download-the-example-code",children:[],level:3},{value:"Step 4. Build the NFT script.",id:"step-4-build-the-nft-script",children:[],level:3},{value:"Step 5. Deploy the script.",id:"step-5-deploy-the-script",children:[],level:3}],level:2},{value:"Perform NFT Operations by Using Lumos",id:"perform-nft-operations-by-using-lumos",children:[{value:"Step 1. Install dependencies in the nft-glue project.",id:"step-1-install-dependencies-in-the-nft-glue-project",children:[],level:3},{value:"Step 2. Update the config.json file.",id:"step-2-update-the-configjson-file",children:[],level:3},{value:"Step 3. Build the project.",id:"step-3-build-the-project",children:[],level:3},{value:"Step 4. Operate on NFT.",id:"step-4-operate-on-nft",children:[{value:"<strong>Generate NFT tokens</strong>",id:"generate-nft-tokens",children:[],level:4},{value:"<strong>List all live NFT cells</strong>",id:"list-all-live-nft-cells",children:[],level:4},{value:"<strong>Transfer NFT tokens from one user to another user</strong>",id:"transfer-nft-tokens-from-one-user-to-another-user",children:[],level:4},{value:"<strong>Sign and seal the transaction</strong>",id:"sign-and-seal-the-transaction",children:[],level:4},{value:"Run the functions in the Node.js REPL mode",id:"run-the-functions-in-the-nodejs-repl-mode",children:[],level:4}],level:3}],level:2}],u={toc:m};function f(e){var n=e.components,t=(0,o.default)(e,s);return(0,r.mdx)("wrapper",(0,a.default)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"A code example, ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/nervosnetwork/dapps-on-ckb-workshop-code"},"DApps on CKB Workshop Code"),", is provided for the demonstration of integrating the NFT script on CKB. For more information about CKB NFT, see ",(0,r.mdx)("a",{parentName:"p",href:"https://talk.nervos.org/t/rfc-ckb-nft-draft-spec/4779"},"CKB RFC: CKB-NFT Draft Spec"),"."),(0,r.mdx)("p",null,"The  example has the following structure:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"dapps-on-ckb-workshop-code/\n\u251c\u2500\u2500 nft-glue\n\u251c\u2500\u2500 nft-validator\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("strong",{parentName:"p"},"nft-validator"),": The ",(0,r.mdx)("strong",{parentName:"p"},"nft-validator")," is a Rust based on-chain script validator project for supporting NFT tokens on CKB. ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/nervosnetwork/capsule"},"Capsule")," is leveraged to simplify the script development.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("strong",{parentName:"p"},"nft-glue"),": The ",(0,r.mdx)("strong",{parentName:"p"},"nft-glue")," is a separate project. It provides operations on NFT tokens with the support of Lumos. ",(0,r.mdx)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1fQKyOrkN8I61a1ZGXCgRczi6T_zWH0aN-IA2SFpdCU4/edit?usp=sharing"},"Slides")," and a ",(0,r.mdx)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=7ob-WL1eWrQ"},"video")," are provided for an overview of the architecture and code walkthrough of the nft-glue project. "))),(0,r.mdx)("h2",{id:"environment"},"Environment"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"OS: Ubuntu 20.04.2 "),(0,r.mdx)("li",{parentName:"ul"},"Node.js (v14.0.0)"),(0,r.mdx)("li",{parentName:"ul"},"Yarn (1.22.5)"),(0,r.mdx)("li",{parentName:"ul"},"GCC and make"),(0,r.mdx)("li",{parentName:"ul"},"TypeScript version 3.8.3"),(0,r.mdx)("li",{parentName:"ul"},"CKB version v0.39.0")),(0,r.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.mdx)("p",null,"The following prerequisites apply for this example:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The development environment is set up. For more information, see ",(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/preparation/setupsystem"),mdxType:"Link"},"Set Up the Development Environment"),"."),(0,r.mdx)("li",{parentName:"ul"},"The account to deploy the NFT script owns enough CKB capacity (33,613.0 CKB). For more information about creating accounts, see ",(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/preparation/createaccount"),mdxType:"Link"},"Create Accounts"),".")),(0,r.mdx)("h2",{id:"deploy-the-nft-script-on-dev-chain"},"Deploy the NFT Script on DEV Chain"),(0,r.mdx)("h3",{id:"step-1-install-docker-on-ubuntu-and-manage-docker-as-a-non-root-user"},"Step 1. Install Docker on Ubuntu and manage Docker as a non-root user."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Docker")," must be installed for building and deploying smart contracts. For more information about Docker installation, see ",(0,r.mdx)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/"},"Install Docker Engine"),"."),(0,r.mdx)("p",null,"To manage Docker as a non-root user, see the Docker documentations of ",(0,r.mdx)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/linux-postinstall/"},"Manage Docker as a non-root user"),"."),(0,r.mdx)("h3",{id:"step-2-install-capsule"},"Step 2. Install Capsule."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Capsule")," is the tool for building and deploying scripts (contracts) on Nervos CKB. "),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Download the pre-built installer of ",(0,r.mdx)("b",null,"capsule_v0.1.3_x86_64-linux.tar.gz"),"."),(0,r.mdx)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",null,"There are some versions of Capsule that are incompatible with the NFT integration code example. Version ",(0,r.mdx)("b",null,"0.1.3")," is verified and recommended for walking through this NFT integration example."))),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"$ curl -LO https://github.com/nervosnetwork/capsule/releases/download/v0.1.3/capsule_v0.1.3_x86_64-linux.tar.gz\n$ tar xzf capsule_v0.1.3_x86_64-linux.tar.gz\n"))),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Add ",(0,r.mdx)("b",null,"ckb-cli")," and ",(0,r.mdx)("b",null,"Capsule")," to the PATH environment variable."),(0,r.mdx)("p",null,"To add the PATH variables, add the lines ",(0,r.mdx)("code",null,"export PATH=$PATH:/",(0,r.mdx)("var",null,"path-to-the-file"))," (ckb-cli and Capsule) to the end of the ",(0,r.mdx)("b",null,"~/.bashrc")," file for Bash shell."),(0,r.mdx)("p",{parentName:"li"},"For example:"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"ckb-cli: ",(0,r.mdx)("code",null,"export PATH=$PATH:/home/user1/ckb_v0.39.0_x86_64-unknown-linux-gnu")),(0,r.mdx)("p",{parentName:"li"},"The folder /home/user1/ckb_v0.40.0_x86_64-unknown-linux-gnu contains the ckb tools installed in ",(0,r.mdx)("b",null,"step 1"),".")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"Capsule: ",(0,r.mdx)("code",null,"export PATH=$PATH:/home/user1/capsule_v0.1.3_x86_64-linux")),(0,r.mdx)("p",{parentName:"li"},"The folder /home/user1/capsule_v0.1.3_x86_64-linux contains the Capsule tools installed in ",(0,r.mdx)("b",null,"step 2"),"."),(0,r.mdx)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"The current user must have permissions to run ckb-cli and Capsule. If the execution of ckb-cli or Capsule requires sudo commands, that may cause issues during the deployment process.")))))),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Check the Capsule installation."))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"$ capsule check\n")),(0,r.mdx)("details",null,(0,r.mdx)("summary",null,"Output"),(0,r.mdx)("p",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"------------------------------\ndocker  installed\nckb-cli installed v0.39.0\n------------------------------\n")))),(0,r.mdx)("h3",{id:"step-3-download-the-example-code"},"Step 3. Download the example code."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"$ git clone https://github.com/nervosnetwork/dapps-on-ckb-workshop-code.git\n")),(0,r.mdx)("h3",{id:"step-4-build-the-nft-script"},"Step 4. Build the NFT script."),(0,r.mdx)("p",null,"This step compiles and generates the NFT source script to an RISC-V binary program into the ",(0,r.mdx)("inlineCode",{parentName:"p"},"dapps-on-ckb-workshop-code/nft-validator/build/debug")," folder."),(0,r.mdx)("p",null,"To build the NFT script:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"$ cd dapps-on-ckb-workshop-code/nft-validator\n$ capsule build\n")),(0,r.mdx)("details",null,(0,r.mdx)("summary",null,"Output"),(0,r.mdx)("p",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"Building contract nft-validator\n Downloading crates ...\n  Downloaded ckb-allocator v0.1.1\n  Downloaded cc v1.0.58\n  Downloaded ckb-std v0.4.1\n  Downloaded buddy-alloc v0.3.0\n   Compiling cfg-if v0.1.10\n   Compiling cc v1.0.58\n   Compiling buddy-alloc v0.3.0\n   Compiling blake2b-ref v0.1.0\n   Compiling molecule v0.6.0\n   Compiling ckb-allocator v0.1.1\n   Compiling ckb-standalone-types v0.0.1-pre.1\n   Compiling ckb-std v0.4.1\n   Compiling nft-validator v0.1.0 (/code/contracts/nft-validator)\n    Finished dev [unoptimized + debuginfo] target(s) in 58.96s\nDone\n")))),(0,r.mdx)("h3",{id:"step-5-deploy-the-script"},"Step 5. Deploy the script."),(0,r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"The CKB node and the miner must start running before deploying the NFT script. To start the CKB node, run ",(0,r.mdx)("inlineCode",{parentName:"p"},"ckb run -C devnet")," . To start the miner, run ",(0,r.mdx)("inlineCode",{parentName:"p"},"ckb miner -C devnet"),"."))),(0,r.mdx)("p",null,"To deploy the NFT script:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Update the ",(0,r.mdx)("inlineCode",{parentName:"p"},"[lock]")," section in the nft-validator/",(0,r.mdx)("inlineCode",{parentName:"p"},"deployment.toml")," file with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"lock_arg"),"  of the account that is created in the preparation phase. For more information about creating an account, see ",(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/preparation/createaccount"),mdxType:"Link"},"Create Accounts"),"."),(0,r.mdx)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"The account must have enough CKB capacity (33,613.0 CKB) for the deployment."))),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-toml",metastring:'title="nft-validator/deployment.toml"',title:'"nft-validator/deployment.toml"'},'# [[cells]]\n# name = "my_cell"\n# enable_type_id = false\n# location = { file = "build/release/my_cell" }\n\n# # Dep group cells\n# [[dep_groups]]\n# name = "my_dep_group"\n# cells = [\n#   "my_cell",\n#   "secp256k1_data"\n# ]\n\n# # Replace with your own lock if you want to unlock deployed cells.\n# # The deployment code_hash is secp256k1 lock\n[lock]\ncode_hash = "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8"\nargs = "0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e"\nhash_type = "type"\n'))),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Generate the release binary."),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"$ capsule build --release\n")),(0,r.mdx)("details",null,(0,r.mdx)("summary",null,"Output"),(0,r.mdx)("p",null,(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre"},"Building contract nft-validator\n   Compiling cc v1.0.58\n   Compiling cfg-if v0.1.10\n   Compiling buddy-alloc v0.3.0\n   Compiling blake2b-ref v0.1.0\n   Compiling molecule v0.6.0\n   Compiling ckb-allocator v0.1.1\n   Compiling ckb-standalone-types v0.0.1-pre.1\n   Compiling ckb-std v0.4.1\n   Compiling nft-validator v0.1.0 (/code/contracts/nft-validator)\n    Finished release [optimized] target(s) in 17.31s\nDone\n"))))),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},'Deploy the NFT binary program to DEV chain by using the "',(0,r.mdx)("code",null,"capsule deploy --address ",(0,r.mdx)("var",null,"the testnet address of the account created in step 2")),'" command.'),(0,r.mdx)("p",{parentName:"li"},"A cell is created on the DEV chain with the binary program as the cell data. Transactions on NFT tokens reference the cell via cell deps to use the NFT script."),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"$ capsule deploy --address ckt1qyq8uqrxpw9tzg4u5waydrzmdmh8raqt0k8qmuetsf\n")),(0,r.mdx)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"data_hash")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"tx_hash")," will be used in later NFT operations."))))),(0,r.mdx)("details",null,(0,r.mdx)("summary",null,"Output"),(0,r.mdx)("p",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},'Create directory "/home/xy/dapps-on-ckb-workshop-code/nft-validator/migrations/dev"\nDeployment plan:\n---\nmigrated_capacity: 0.0 (CKB)\nnew_occupied_capacity: 33613.0 (CKB)\ntxs_fee_capacity: 0.0001 (CKB)\ntotal_occupied_capacity: 33613.0 (CKB)\nrecipe:\n  cells:\n    - name: nft\n      index: 0\n      tx_hash: 0xec41ba0c9aa59383481aca20b713ba37413478e0a2c6c258c1a2bc489c713a33\n      occupied_capacity: 33613.0 (CKB)\n      data_hash: 0x790420c4244a42e732f8065c275b541695a66c7348f885bb3d9b52d83b279115\n      type_id: ~\n  dep_groups: []\nConfirm deployment? (Yes/No)\nyes \nPassword: \nsend cell_tx ec41ba0c9aa59383481aca20b713ba37413478e0a2c6c258c1a2bc489c713a33\nDeployment complete\n')))),(0,r.mdx)("h2",{id:"perform-nft-operations-by-using-lumos"},"Perform NFT Operations by Using Lumos"),(0,r.mdx)("p",null,"After the deployment of the NFT script on DEV chain, implement the following steps to interact with and operate on NFT tokens by using Lumos."),(0,r.mdx)("h3",{id:"step-1-install-dependencies-in-the-nft-glue-project"},"Step 1. Install dependencies in the nft-glue project."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"$ cd dapps-on-ckb-workshop-code/nft-glue\n$ yarn install\n")),(0,r.mdx)("details",null,(0,r.mdx)("summary",null,"Output"),(0,r.mdx)("p",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"yarn install v1.22.5\n[1/4] Resolving packages...\n[2/4] Fetching packages...\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nDone in 13.02s.\n")))),(0,r.mdx)("h3",{id:"step-2-update-the-configjson-file"},"Step 2. Update the config.json file."),(0,r.mdx)("p",null,'Add the NFT configuration for the NFT script under the "DAO" script.'),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"CODE_HASH")," is the ",(0,r.mdx)("inlineCode",{parentName:"p"},"data_hash")," from the deployment recipe.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},(0,r.mdx)("inlineCode",{parentName:"p"},"TX_HASH")," is the ",(0,r.mdx)("inlineCode",{parentName:"p"},"tx_hash")," from the deployment recipe."))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json",metastring:'title="nft-glue/config.json"',title:'"nft-glue/config.json"'},'    ,\n    "NFT": {\n      "CODE_HASH": "0x790420c4244a42e732f8065c275b541695a66c7348f885bb3d9b52d83b279115",\n      "HASH_TYPE": "data",\n      "TX_HASH": "0xbe6003de6d3d2a03ca54bdbe2e1df47131109b3bd0a941a6284dd761f292d886",\n      "INDEX": "0x0",\n      "DEP_TYPE": "code"\n    }\n')),(0,r.mdx)("h3",{id:"step-3-build-the-project"},"Step 3. Build the project."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"$ cd nft-glue\n$ tsc\n")),(0,r.mdx)("h3",{id:"step-4-operate-on-nft"},"Step 4. Operate on NFT."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"index.ts")," file under the nft-glue project includes the following operations:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/guides/integratenft#generate-nft-tokens"),mdxType:"Link"},"Generate NFT tokens"),"."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/guides/integratenft#list-all-live-nft-cells"),mdxType:"Link"},"List all live NFT cells"),"."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/guides/integratenft#transfer-nft-tokens-from-one-user-to-another-user"),mdxType:"Link"},"Transfer NFT tokens from one user to another user"),"."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/guides/integratenft#sign-and-seal-the-transaction"),mdxType:"Link"},"Sign and seal the transaction"),".")),(0,r.mdx)("p",null,"Let us check out how the nft-glue project implements these operations by using Lumos. The ",(0,r.mdx)(i.default,{to:(0,l.default)("/docs/tools/lumos/guides/integratenft#run-the-functions-in-the-nodejs-repl-mode"),mdxType:"Link"},"execution")," of these operations can be found at the end of this guide."),(0,r.mdx)("h4",{id:"generate-nft-tokens"},(0,r.mdx)("strong",{parentName:"h4"},"Generate NFT tokens")),(0,r.mdx)("p",null,"The following code snippet firstly inserts a dummy NFT output cell. The dummy cell is exactly the same as a normal cell, except that the cell uses all zeros as NFT ID. "),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'export async function generateNftToken(\n  fromAddress: Address,\n  governanceLock: Script,\n  owner: Address\n): Promise<TransactionSkeletonType> {\n\n  let skeleton = TransactionSkeleton({ cellProvider: INDEXER });\n\n  skeleton = skeleton.update("outputs", (outputs) => {\n    return outputs.push({\n      cell_output: {\n        capacity: "0x" + (BigInt(200) * BigInt(100000000)).toString(16),\n        lock: parseAddress(owner),\n        type: buildNftTypeScript(governanceLock),\n      },\n      data:\n        "0x0000000000000000000000000000000000000000000000000000000000000000",\n      out_point: undefined,\n      block_hash: undefined,\n    });\n  });\n')),(0,r.mdx)("div",{className:"admonition admonition-info alert alert--info"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"Lumos can generate smaller transactions for optimizations of a normal workflow. That means the following two cases may happen:"),(0,r.mdx)("ul",{parentName:"div"},(0,r.mdx)("li",{parentName:"ul"},"Multiple output cells with the same owner will be merged into one single output cell."),(0,r.mdx)("li",{parentName:"ul"},"If the transfer operation transfers the assets from the owner to himself/herself, the transfer operation will be canceled.")))),(0,r.mdx)("p",null,"Because NFT requires special output cell and stable input cell. To avoid further optimizations altering those fields, ",(0,r.mdx)("inlineCode",{parentName:"p"},"fixedEntries")," can be used to mark the fields as fixed."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'  skeleton = skeleton.update("fixedEntries", (fixedEntries) => {\n    return fixedEntries.push(\n      {\n        field: "outputs",\n        index: 0,\n      }\n    );\n  });\n')),(0,r.mdx)("p",null,"Lumos is used to provide input cells that accommodate the capacities required by the output cell. ."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},"  skeleton = await secp256k1Blake160.injectCapacity(skeleton, 0, fromAddress);\n")),(0,r.mdx)("p",null,"The following code snippet generates the correct NFT ID based on the first input cell and fill the NFT ID in the NFT output cell. "),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'const { CKBHasher } = utils;  \nconst hasher = new CKBHasher();\n  const inputCell = skeleton.get("inputs")!.get(0)!;\n  hasher.update(\n    core.SerializeCellInput(\n      normalizers.NormalizeCellInput({\n        previous_output: inputCell.out_point,\n        since: "0x0",\n      })\n    )\n  );\n  hasher.update("0x0000000000000000");\n  const nftId = hasher.digestHex();\n  skeleton = skeleton.update("outputs", (outputs) => {\n    return outputs.update(0, (output) => {\n      output.data = nftId;\n      return output;\n    });\n  });\n')),(0,r.mdx)("p",null,"The first input cell requires to be fixed because it is used to generate NFT ID. The following code snippet marks the first input cell as fixed."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'  skeleton = skeleton.update("fixedEntries", (fixedEntries) => {\n    return fixedEntries.push(\n      {\n        field: "inputs",\n        index: 0,\n      }\n    );\n  });\n')),(0,r.mdx)("p",null,"Because the output cell references the NFT script, the NFT cell dep needs to be included. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"index")," of the NFT script cell must be defined in the nft-glue/config.json file."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'import { getConfig, initializeConfig } from "@ckb-lumos/config-manager";\nexport const CONFIG = getConfig();\n\nfunction buildNftCellDep(): CellDep {\n  const NFT = CONFIG.SCRIPTS.NFT;\n  if (!NFT) {\n    throw new Error("NFT script is not configured!");\n  }\n  return {\n    out_point: {\n      tx_hash: NFT.TX_HASH,\n      index: NFT.INDEX,\n    },\n    dep_type: NFT.DEP_TYPE,\n  };\n}\n\nskeleton = skeleton.update("cellDeps", (cellDeps) => {\n    return cellDeps.push(buildNftCellDep());\n  });\n')),(0,r.mdx)("p",null,"The common script is used in the following code snippet to add fee for this transaction."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},"// For simplicity, we hardcode 0.1 CKB as transaction fee here.\nconst FEE = BigInt(1*10**8); \nskeleton = await common.payFee(skeleton, [fromAddress], FEE);\n")),(0,r.mdx)("div",{className:"admonition admonition-info alert alert--info"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"The ",(0,r.mdx)("b",null,"common")," module, ",(0,r.mdx)("b",null,"locktime_pool")," and ",(0,r.mdx)("b",null,"sudt")," module of the ",(0,r.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html"},"common-scripts")," package can treat multiple different wallets as a single unit. The example only gathers capacities from one single wallet to demonstrate the integrations for NFT. "))),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#preparesigningentries-16"},"common.prepareSigningEntries")," function generates messages that are required in transaction signing phase."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},"skeleton = common.prepareSigningEntries(skeleton, { config: CONFIG });\n")),(0,r.mdx)("h4",{id:"list-all-live-nft-cells"},(0,r.mdx)("strong",{parentName:"h4"},"List all live NFT cells")),(0,r.mdx)("p",null,"Live NFT cells are the cells with the requested NFT type script."),(0,r.mdx)("p",null,"For simplicity, the function gathers all cells in a single array. The number of cells may impact the execution performance. "),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'export async function listNftTokens(\n  governanceLock: Script\n): Promise<Array<Cell>> {\n  const collector = INDEXER.collector({\n    type: buildNftTypeScript(governanceLock),\n    data: "any",\n  });\n  const results = [];\n  for await (const cell of collector.collect()) {\n    results.push(cell);\n  }\n  return results;\n}\n')),(0,r.mdx)("h4",{id:"transfer-nft-tokens-from-one-user-to-another-user"},(0,r.mdx)("strong",{parentName:"h4"},"Transfer NFT tokens from one user to another user")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"transferNftToken()")," function transfers NFT tokens from one user to another user."),(0,r.mdx)("p",null,"For simplicity, the original token sender will pay for the transaction fee. This means the token sender must have spare CKB capacities in addition to the NFT tokens."),(0,r.mdx)("p",null,"The following code snippet inserts the input and output cells from the NFT cell into the transaction skeleton."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'let skeleton = TransactionSkeleton({ cellProvider: indexer });\n  \n  skeleton = skeleton\n    .update("inputs", (inputs) => {\n      return inputs.push(nftCell);\n    })\n    .update("outputs", (outputs) => {\n      return outputs.push({\n        cell_output: {\n          capacity: nftCell.cell_output.capacity,\n          lock: parseAddress(toAddress),\n          type: nftCell.cell_output.type,\n        },\n        data: nftCell.data,\n        out_point: undefined,\n        block_hash: undefined,\n      });\n    });\n')),(0,r.mdx)("p",null,"For extra safety, mark the input and output NFT cells as ",(0,r.mdx)("inlineCode",{parentName:"p"},"fixedEntries")," ."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'  skeleton = skeleton.update("fixedEntries", (fixedEntries) => {\n    return fixedEntries.push(\n      {\n        field: "inputs",\n        index: 0,\n      },\n      {\n        field: "outputs",\n        index: 0,\n      }\n    );\n  });\n')),(0,r.mdx)("p",null,"Because the output cell references the NFT script, the NFT cell dep needs to be included. "),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'skeleton = skeleton.update("cellDeps", (cellDeps) => {\n    return cellDeps.push(buildNftCellDep());\n  });\n')),(0,r.mdx)("p",null,"For simplicity, the token sender will pay for the transaction fee. So the token sender must have spare CKB capacities in addition to the NFT token."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},"skeleton = await common.payFee(\n  skeleton,\n  [generateAddress(nftCell.cell_output.lock)],\n  FEE\n);\n")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#preparesigningentries-16"},"common.prepareSigningEntries")," function generates messages that are required in transaction signing phase."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'}," skeleton = common.prepareSigningEntries(skeleton, { config: CONFIG });\n return skeleton;\n")),(0,r.mdx)("h4",{id:"sign-and-seal-the-transaction"},(0,r.mdx)("strong",{parentName:"h4"},"Sign and seal the transaction")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"signAndSendTransactionSkeleton()")," function signs the prepared transaction skeleton from the returned result of ",(0,r.mdx)("inlineCode",{parentName:"p"},"generateNftToken()")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"transferNftToken()"),", and then send the signed transaction skeleton to the CKB node."),(0,r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"The signing function is just for demonstration and simplicity in this code example. The signing function is separate from Lumos related functions because Lumos do not manage private keys unless absolutely requested. Developers can use a service that handle private keys when developing DApps."))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="nft-glue/src/index.ts"',title:'"nft-glue/src/index.ts"'},'export async function signAndSendTransactionSkeleton(\n  skeleton: TransactionSkeletonType,\n  privateKey: HexString\n): Promise<Hash> {\n  const signatures = skeleton\n    .get("signingEntries")\n    .map(({ message }) => {\n      const o = ecdsaSign(\n        new Uint8Array(new Reader(message).toArrayBuffer()),\n        new Uint8Array(new Reader(privateKey).toArrayBuffer())\n      );\n      const signature = new Uint8Array(65);\n      signature.set(o.signature, 0);\n      signature.set([o.recid], 64);\n      return new Reader(signature.buffer).serializeJson();\n    })\n    .toArray();\n  const tx = sealTransaction(skeleton, signatures);\n  const rpc = new RPC(CKB_RPC);\n  const hash = await rpc.send_transaction(tx);\n  return hash;\n}\n')),(0,r.mdx)("h4",{id:"run-the-functions-in-the-nodejs-repl-mode"},"Run the functions in the Node.js REPL mode"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},'$ cd nft-glue\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const fromAddress = "ckt1qyq8uqrxpw9tzg4u5waydrzmdmh8raqt0k8qmuetsf";\n> const governanceLock = {\n  code_hash: "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n  hash_type: "type",\n  args: "0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e"\n};\n> const owner = "ckt1qyq8uqrxpw9tzg4u5waydrzmdmh8raqt0k8qmuetsf";\n> const {listNftTokens, generateNftToken, signAndSendTransactionSkeleton,transferNftToken} = require(".");\n>\n> const txSkeleton = await generateNftToken(fromAddress, governanceLock,owner);\n> const { createTransactionFromSkeleton} = require("@ckb-lumos/helpers");\n>\n> console.log("Transaction Skeleton:", JSON.stringify(createTransactionFromSkeleton(txSkeleton), null, 2));\nTransaction Skeleton: {\n  "version": "0x0",\n  "cell_deps": [\n    {\n      "out_point": {\n        "tx_hash": "0xace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708",\n        "index": "0x0"\n      },\n      "dep_type": "dep_group"\n    },\n    {\n      "out_point": {\n        "tx_hash": "0xec41ba0c9aa59383481aca20b713ba37413478e0a2c6c258c1a2bc489c713a33",\n        "index": "0x0"\n      },\n      "dep_type": "code"\n    }\n  ],\n  "header_deps": [],\n  "inputs": [\n    {\n      "since": "0x0",\n      "previous_output": {\n        "tx_hash": "0xbdc50e04c88978fe53debe989863855b2e3e4be02dd989c6f8771a2b263ef213",\n        "index": "0x0"\n      }\n    }\n  ],\n  "outputs": [\n    {\n      "capacity": "0x4a817c800",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e"\n      },\n      "type": {\n        "code_hash": "0x790420c4244a42e732f8065c275b541695a66c7348f885bb3d9b52d83b279115",\n        "hash_type": "data",\n        "args": "0xf6ea009a4829de7aeecd75f3ae6bcdbaacf7328074ae52a48456a8793a4b1cca"\n      }\n    },\n    {\n      "capacity": "0x1242f6d7e2c9",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x970e5ca3890a0e33a89e86546a6701531c02cc3b47e58a7eca80b696ec16a581",\n    "0x"\n  ],\n  "witnesses": [\n    "0x55000000100000005500000055000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"\n  ]\n};\n>\n> const hash = await signAndSendTransactionSkeleton(txSkeleton, "0xf2a91b1410f7308631b89603262448ba515cddac1ffe250265551c82fff3eb3a");\n0xb00cf6f69b0fa8821730eb4b1424552b81f766653ce051668ad7cb4e607db2da\n>\n> await listNftTokens(governanceLock);\n[\n  {\n    cell_output: { capacity: \'0x4a817c800\', lock: [Object], type: [Object] },\n    out_point: {\n      tx_hash: \'0xb00cf6f69b0fa8821730eb4b1424552b81f766653ce051668ad7cb4e607db2da\',\n      index: \'0x0\'\n    },\n    block_hash: \'0x467df1fbf1e85487b082f8673fbab519cdff13f7438d98471043799ef2f66d69\',\n    block_number: \'0xc8\',\n    data: \'0xf7a157eb5551c247f0136b6bbe317401043ca0fbca9345e546112afdd58d352d\'\n  }\n]\n> const cell = (await listNftTokens(governanceLock))[0];\n>\n> console.log(cell);\n{\n  cell_output: {\n    capacity: \'0x4a817c800\',\n    lock: {\n      code_hash: \'0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8\',\n      hash_type: \'type\',\n      args: \'0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e\'\n    },\n    type: {\n      code_hash: \'0x790420c4244a42e732f8065c275b541695a66c7348f885bb3d9b52d83b279115\',\n      hash_type: \'data\',\n      args: \'0xf6ea009a4829de7aeecd75f3ae6bcdbaacf7328074ae52a48456a8793a4b1cca\'\n    }\n  },\n  out_point: {\n    tx_hash: \'0xb00cf6f69b0fa8821730eb4b1424552b81f766653ce051668ad7cb4e607db2da\',\n    index: \'0x0\'\n  },\n  block_hash: \'0x467df1fbf1e85487b082f8673fbab519cdff13f7438d98471043799ef2f66d69\',\n  block_number: \'0xc8\',\n  data: \'0xf7a157eb5551c247f0136b6bbe317401043ca0fbca9345e546112afdd58d352d\'\n}\n> const transferTXSkeleton = await transferNftToken(cell, fromAddress);\n> const hash = await signAndSendTransactionSkeleton(transferTXSkeleton, "0xf2a91b1410f7308631b89603262448ba515cddac1ffe250265551c82fff3eb3a");\n> console.log(hash);\n0x3d417016824534fed10e07f2288ce3696b53282e83d826b1538ce287755c0fe5\n')))}f.isMDXComponent=!0}}]);